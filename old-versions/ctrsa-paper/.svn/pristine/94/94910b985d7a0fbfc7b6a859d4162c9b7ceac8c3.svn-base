\section{Results} \label{sec:results}

One of the main contributions of this research is the proposal to use an alternative PRNG to the one used by Howe et al. \cite{howe2018standard}, cSHAKE. Comparatively, the PRNG we propose here, Trivium, uses 4.5x less FPGA slices than cSHAKE. This means that when we instantiate increased parallel multipliers, we consume far less increases in FPGA area consumption than we would have if cSHAKE were used. This is essentially the only significant area consumption increase from designs of the same module, as we increase the number of parallel multipliers. This is because the vector being multiplied remains constant, we just require some additional registers to store these extra random elements.

There is a significant increase in area consumption of all the decapsulation results which do not utilise BRAM. This is mainly due to the requirement of storing public-key and secret-key matrices. We provide results for both with and without BRAM, for which without BRAM has a significantly higher throughput, due to the much higher frequency. How these compare, as well as all other modules, are shown in Figure \ref{fig:hw_line}, which provides the efficiency of each design (that is, their throughput) per FPGA slice utilised. Figure \ref{fig:hw} shows a slice count summary of all the proposed designs, showing a consistent and fairly linear increase in slice utilisation as the number of parallel multipliers increases. We note on decapsulation results in Figure \ref{fig:hw} where the results would lie if BRAM is used, hence the total results for without BRAM include both red areas. In most cases slice counts at least double for decapsulation when BRAM is removed, with only slight increases in throughout, hence it might be prudent in some use cases to keep BRAM usage.

Compared to the previous research by Howe et al. \cite{howe2018standard}, we show significant savings in FPGA area resource consumption. For the comparable FrodoKEM modules (that is, using one multiplier) we reduce slice consumption by 3.6x and 5.4x for key generation and 1.6x for encapsulation, all whilst not requiring any BRAM, whereas previous results utilise BRAM. For decapsulation, we save between 1.6x and 2.6x on slice consumption if BRAM is used and gain in slice counts by 1.5x and 1.1x if BRAM is not used. This increase is expected since more than half of this is due to storage otherwise used in BRAM.

Since the majority of the proposed designs operate without BRAM, we were able to attain a much higher frequency than compared to Howe et al. \cite{howe2018standard}. This means our throughput performance has outperformed previous comparable results, by factors between 1.13x and 1.19x. Moreover, whilst maintaining less area consumption than previous research we were able to increase the amount of parallel multipliers used. As a result, we can achieve up to 840 key generations per second (a 16.5x increase), 825 encapsulations per second (a 16.2x increase), and 710 operations per second (a 15.6x increase) all whilst consuming less area of the FPGA than used by Howe et al. \cite{howe2018standard}.

We also maintain the constant runtime which the previous implementation attains, as well as implementing first-order masking during decapsulation. The clock cycle counts for each module are easy to calculate; key generation requires $ (n^2\bar{n}) / k$ clocks, encapsulation requires $ (n^2\bar{n} + \bar{n}^2n)/k $ clocks, and decapsulation requires $(n^2\bar{n} + 2\bar{n}^2n)/k$ clocks, for dimensions $n=640$ or 976, $\bar{n}=8$, and $k$ referring to the number of parallel multipliers used.


%Talk about:

%2. say increase in registers has an increase only due to added Trviums and a few additional registers to store them. Saves area vs CHES by now needing to pre-calculate and pre-store values for the matrix A. We intentionally do not use BRAM to store any of the public key or secret key values, like at CHES, so we can ensure a higher frequency, meaning our throughput is much higher.

%3. Graphs show an increase 

%4. BRAM is still ideal for use in decapsulation

%5. frequency decreases as the number of parallel multipliers is used, also decreases and is slightly less in decaps due to the significant increase in memory usage for public and secret keys.


%Sections:

%1. Compare with CHES implementation

%2. Compare with each other. Decaps needs around 12.5 BRAMs and this is why LUTs are significantly higher for these modules.

%3. What about masking

%4. error sampler is much smaller now due to using trivium. plus the overall PRNG now takes around 15\%, compared to 42\% from CHES (for 1x multiplier).

\begin{table}[b]
\centering
\caption{FPGA resource consumption of the proposed FrodoKEM hardware designs, using Trivium as a PRNG, with 1, 4, 8, or 16 parallel multipliers and also using both parameter sets FrodoKEM-640 and FrodoKEM976. Results with BRAM usage have an asterisk (*). Also shown are the hardware results of Trivium and the error sampler. All results utilise a Xilinx Artix-7 FPGA}
    \advance\leftskip-0.25cm
\begin{tabular}{|c|c|c|c|c|c|} \hline
\textbf{FrodoKEM} & \multirow{2}{*}{\textbf{LUT/FF}} & \multirow{2}{*}{\textbf{Slices}}  & \textbf{DSP/} &  \multirow{2}{*}{\textbf{MHz}} & \textbf{Ops/}  \\
\textbf{Protocol} & & & \textbf{BRAM} & &\textbf{Sec} \\ \hline

KeyGen-640 1x & 971/433 & 290 & 1/0 & 191 & 59 \\
KeyGen-640 4x & 1174/781 & 355 & 4/0 & 185 & 226 \\
KeyGen-640 8x & 1679/1570 & 532 & 8/0 & 182 & 445 \\
KeyGen-640 16x & 2587/2994 & 855 & 16/0 & 172 & 840 \\ \hline
Encaps-640 1x & 4246/2131 & 1180 & 1/0 & 190 & 58 \\
Encaps-640 4x & 4620/2552 & 1338 & 4/0 & 183 & 221 \\
Encaps-640 8x & 5155/3356 & 1485 & 8/0 & 177 & 427 \\
Encaps-640 16x & 5796/4694 & 1692 & 16/0 & 171 & 825 \\ \hline
Decaps-640 1x & 10518/2299 & 2933 & 1/0 & 190 & 57 \\
Decaps-640 4x & 11581/2818 & 3424 & 4/0 & 174 & 208 \\
Decaps-640 8x & 13128/3737 & 3710 & 8/0 & 164 & 391 \\
Decaps-640 16x & 14528/5335 & 4020 & 16/0 & 160 & 763 \\ \hline 
*Decaps-640 1x & 4466/2152 & 1254 & 1/12.5 & 162 & 49 \\
*Decaps-640 4x & 4841/2661 & 1345 & 4/12.5 & 161 & 192 \\
*Decaps-640 8x & 5476/3479 & 1558 & 8/12.5 & 156 & 372 \\
*Decaps-640 16x & 6881/5081 & 1947 & 16/12.5 & 149 & 710 \\ \hline \hline
KeyGen-976 1x & 1243/441 & 362 & 1/0 & 189 & 25 \\
KeyGen-976 4x & 1458/792 & 440 & 4/0 & 184 & 97 \\
KeyGen-976 8x & 1967/1576 & 617 & 8/0 & 178 & 187 \\
KeyGen-976 16x & 2869/3000 & 908 & 16/0 & 169 & 355 \\ \hline
Encaps-976 1x & 4650/2118 & 1272 & 1/0 & 187 & 25 \\
Encaps-976 4x & 4996/2611 & 1455 & 4/0 & 180 & 94 \\
Encaps-976 8x & 5562/3349 & 1608 & 8/0 & 175 & 183 \\
Encaps-976 16x & 6188/4678 & 1782 & 16/0 & 168 & 350 \\ \hline
Decaps-976 1x & 14217/2295 & 3956 & 1/0 & 188 & 25 \\
Decaps-976 4x & 16234/2853 & 4648 & 4/0 & 170 & 88 \\
Decaps-976 8x & 17451/3687 & 4985 & 8/0 & 161 & 167 \\
Decaps-976 16x & 18960/5285 & 5274 & 16/0 & 157 & 325 \\ \hline
*Decaps-640 1x & 4888/2153 & 1390 & 1/19 & 162 & 21 \\
*Decaps-640 4x & 5259/2662 & 1450 & 4/19 & 160 & 83 \\
*Decaps-640 8x & 5888/3490 & 1615 & 8/19 & 155 & 161 \\
*Decaps-640 16x & 7213/5087 & 2042 & 16/19 & 148 & 306 \\ \hline
cSHAKE & 2744/1685 & 766 & 0/0 & 172 & 1.2m \\
Error+Trivium & 401/311 & 179 & 0/0 & 211 & 211m \\
Trivium & 296/299 & 169 & 0/0 & 220 & 220m \\ \hline \hline
KeyGen-640 \cite{howe2018standard} & 3771/1800 & 1035 & 1/6 & 167 & 51 \\
Encaps-640 \cite{howe2018standard} & 6745/3528 & 1855 & 1/11 & 167 & 51 \\
Decaps-640 \cite{howe2018standard} & 7220/3549 & 1992 & 1/16 & 162 & 49 \\ \hline
KeyGen-976 \cite{howe2018standard} & 7139/1800 & 1939 & 1/8 & 167 & 22 \\ 
Encaps-976 \cite{howe2018standard} & 7209/3537 & 1985 & 1/16 & 167 & 22 \\
Decaps-976 \cite{howe2018standard} & 7773/3559 & 2158 & 1/24 & 162 & 21 \\ \hline
\end{tabular}
\end{table}

\begin{figure}[h]
\centering
    \advance\leftskip-1cm
\resizebox{0.5\textwidth}{!}{%
\input{figures/hw.tikz}
}
\caption{Visualisation of FPGA slice consumption of FrodoKEM's key generation, encapsulation, \& decapsulation on a Xilinx Artix-7. Decaps values overlap to show results with (*) and without BRAM.}
\label{fig:hw}
\end{figure}

\begin{figure}[h]
\centering
\input{figures/hw_line.tikz}
\caption{Comparison of the throughput performance per FPGA slice on a Xilinx Artix-7.}
 \label{fig:hw_line}
\end{figure}