\section{Introduction} \label{sec:Introdution}

The future development of a scalable quantum computer will allow us to solve in polynomial time several problems which are considered intractable for classical computers. If certainly fields, such as biology and physics would certainly benefit from this ``quantum speed up''~\cite{}, security would be put in danger. The security of our current public key infrastructure is based on the computational hardness of the integer factorization problem and of the discrete logarithm problem. These problems, however, will be solved in polynomial time by a machine capable of executing the Shor's algorithm~\cite{}.

To promptly react to the threat, the scientific community started to study, propose, and implement public key algorithms, to be deployed on classical computers, but  based on problems hard to be solved also using quantum computational power. This effort is supported by governmental and standardization agencies, which are pushing for new and quantum resistant algorithms. The most notable example of these activities is the open context that NIST is running for the selection of the next public key standard algorithm. The context started at the end of 2017 and is expected to run for 5 to 7 years.

Approximate seventy algorithms have been submitted to the contexts. The large majority of them are lattice based algorithms. Lattice based algorithms are a class of cryptographic algorithms which base theirs security on the hardness of problems such has finding the shortest non-zero vector in a lattice. The reason for such a large number of candidates is because lattice based algorithms are extremely promising: they can be implemented efficiently and they are extremely versatile, allowing to implement several basic cryptographic primitives, including signature, key encapsulation, and identity based encryption. 

As in the past case of AES~\cite{} and SHA-3~\cite{}, among the parameters which will be used for the selection, there are the security of the algorithm, and the efficiency when implemented in hardware and in software. In addition to that, algorithms which can be made robust against physical attacks in an effective and efficient way will be preferred. It is thus important, during the scrutiny of the candidates, to explore the potential of implementing these algorithms on a variety of platforms, and to assess the overhead of adding countermeasures against physical attacks.

To this end, in this paper we concentrate on FrodoKEM, a key encapsulation algorithm based on standard lattices which requires the use of a PRNG. We explore the possibility to efficiently implementing it hardware and we estimate the overhead of protecting against power analysis attacks using masking. To maximizing the throughput, while maintaining the area occupation minimal, we rely on a parallel implementation of the multiplication. To be parallelized however, the multiplication requires the use of smaller and more performant random number generators. We propose to achieve the performance required for the PRNG by using Trivium, which we used instead of AES or cSHAKE.

The rest of the paper is organized as follows. Section~\ref{sec:related} discusses the background and the related works. Section~\ref{sec:design} introduces the proposed hardware architectures and the main design decisions. Section~\ref{sec:results} reports the results obtained while synthesizing our design on reconfigurable hardware and compares our performance against the state-of-the-art. We conclude the paper in Section \ref{sec:conclusions}.